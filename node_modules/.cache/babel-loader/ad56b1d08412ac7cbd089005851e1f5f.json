{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\src\\\\NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from \"react-sortable-hoc\";\nimport styles from \"./styles/NewPaletteFormStyles\";\nimport seedColors from \"./seedColors\";\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      colors: seedColors[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  addNewColor(newColor) {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    let rand;\n    let randomColor;\n    let isDuplicateColor = true;\n\n    while (isDuplicateColor) {\n      rand = Math.floor(Math.random() * allColors.length);\n      randomColor = allColors[rand];\n      isDuplicateColor = this.state.colors.some(color => color.name === randomColor.name);\n    }\n\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    });\n  }\n\n  handleSubmit(newPalette) {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n    newPalette.colors = this.state.colors;\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNav, {\n      open: open,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      className: classes.button,\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteIsFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, \"Random Color\")), /*#__PURE__*/React.createElement(ColorPickerForm, {\n      paletteIsFull: paletteIsFull,\n      addNewColor: this.addNewColor,\n      colors: colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColorList, {\n      colors: colors,\n      removeColor: this.removeColor,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      distance: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","PaletteFormNav","ColorPickerForm","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","styles","seedColors","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","addNewColor","bind","handleChange","handleSubmit","removeColor","clearColors","addRandomColor","newColor","newColorName","evt","target","name","value","allColors","palettes","map","p","flat","rand","randomColor","isDuplicateColor","Math","floor","random","length","some","color","newPalette","id","paletteName","toLowerCase","replace","savePalette","history","push","colorName","filter","render","classes","maxColors","paletteIsFull","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","button","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport PaletteFormNav from \"./PaletteFormNav\";\r\nimport ColorPickerForm from \"./ColorPickerForm\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DraggableColorList from \"./DraggableColorList\";\r\nimport { arrayMove } from \"react-sortable-hoc\";\r\nimport styles from \"./styles/NewPaletteFormStyles\";\r\nimport seedColors from \"./seedColors\";\r\n\r\nclass NewPaletteForm extends Component {\r\n  static defaultProps = {\r\n    maxColors: 20\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: true,\r\n      colors: seedColors[0].colors\r\n    };\r\n    this.addNewColor = this.addNewColor.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.removeColor = this.removeColor.bind(this);\r\n    this.clearColors = this.clearColors.bind(this);\r\n    this.addRandomColor = this.addRandomColor.bind(this);\r\n  }\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  addNewColor(newColor) {\r\n    this.setState({\r\n      colors: [...this.state.colors, newColor],\r\n      newColorName: \"\"\r\n    });\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  clearColors() {\r\n    this.setState({ colors: [] });\r\n  }\r\n  addRandomColor() {\r\n    const allColors = this.props.palettes.map(p => p.colors).flat();\r\n    let rand;\r\n    let randomColor;\r\n    let isDuplicateColor = true;\r\n    while (isDuplicateColor) {\r\n      rand = Math.floor(Math.random() * allColors.length);\r\n      randomColor = allColors[rand];\r\n      isDuplicateColor = this.state.colors.some(\r\n        color => color.name === randomColor.name\r\n      );\r\n    }\r\n    this.setState({ colors: [...this.state.colors, randomColor] });\r\n  }\r\n  handleSubmit(newPalette) {\r\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\r\n    newPalette.colors = this.state.colors;\r\n    this.props.savePalette(newPalette);\r\n    this.props.history.push(\"/\");\r\n  }\r\n  removeColor(colorName) {\r\n    this.setState({\r\n      colors: this.state.colors.filter(color => color.name !== colorName)\r\n    });\r\n  }\r\n  onSortEnd = ({ oldIndex, newIndex }) => {\r\n    this.setState(({ colors }) => ({\r\n      colors: arrayMove(colors, oldIndex, newIndex)\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { classes, maxColors, palettes } = this.props;\r\n    const { open, colors } = this.state;\r\n    const paletteIsFull = colors.length >= maxColors;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <PaletteFormNav\r\n          open={open}\r\n          palettes={palettes}\r\n          handleSubmit={this.handleSubmit}\r\n          handleDrawerOpen={this.handleDrawerOpen}\r\n        />\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant='persistent'\r\n          anchor='left'\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <IconButton onClick={this.handleDrawerClose}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <div className={classes.container}>\r\n            <Typography variant='h4' gutterBottom>\r\n              Design Your Palette\r\n            </Typography>\r\n            <div className={classes.buttons}>\r\n              <Button\r\n                variant='contained'\r\n                color='secondary'\r\n                onClick={this.clearColors}\r\n                className={classes.button}\r\n              >\r\n                Clear Palette\r\n              </Button>\r\n              <Button\r\n                variant='contained'\r\n                className={classes.button}\r\n                color='primary'\r\n                onClick={this.addRandomColor}\r\n                disabled={paletteIsFull}\r\n              >\r\n                Random Color\r\n              </Button>\r\n            </div>\r\n            <ColorPickerForm\r\n              paletteIsFull={paletteIsFull}\r\n              addNewColor={this.addNewColor}\r\n              colors={colors}\r\n            />\r\n          </div>\r\n        </Drawer>\r\n        <main\r\n          className={classNames(classes.content, {\r\n            [classes.contentShift]: open\r\n          })}\r\n        >\r\n          <div className={classes.drawerHeader} />\r\n          <DraggableColorList\r\n            colors={colors}\r\n            removeColor={this.removeColor}\r\n            axis='xy'\r\n            onSortEnd={this.onSortEnd}\r\n            distance={20}\r\n          />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}