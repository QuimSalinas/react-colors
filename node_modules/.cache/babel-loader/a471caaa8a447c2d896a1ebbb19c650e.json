{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from\"react\";import{ChromePicker}from\"react-color\";import Button from\"@material-ui/core/Button\";import{ValidatorForm,TextValidator}from'react-material-ui-form-validator';import{withStyles}from\"@material-ui/core/styles\";import styles from\"./styles/ColorPickerStyles\";var ColorPicker=/*#__PURE__*/function(_React$Component){_inherits(ColorPicker,_React$Component);var _super=_createSuper(ColorPicker);function ColorPicker(props){var _this;_classCallCheck(this,ColorPicker);_this=_super.call(this,props);_this.handleColorChange=function(color){_this.setState({currentColor:\"rgba(\".concat(color.rgb.r,\",\").concat(color.rgb.g,\",\").concat(color.rgb.b,\",\").concat(color.rgb.a,\")\")});};_this.handleChange=function(evt){_this.setState(_defineProperty({},evt.target.name,evt.target.value));};_this.addNewColor=function(){_this.props.addNewColor({name:_this.state.newColorName,color:_this.state.currentColor});_this.setState({newColorName:\"\"});};_this.state={currentColor:_this.props.initialColor,newColorName:\"\"};return _this;}_createClass(ColorPicker,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// custom rule will have name 'isPasswordMatch'\nValidatorForm.addValidationRule('isColorNameUnique',function(value){return _this2.props.colors.every(function(_ref){var name=_ref.name;return name.toLowerCase()!==value.toLowerCase();});});ValidatorForm.addValidationRule('isColorUnique',function(value){return _this2.props.colors.every(function(_ref2){var color=_ref2.color;return color!==_this2.state.currentColor;});});}},{key:\"render\",value:function render(){var _this$state=this.state,currentColor=_this$state.currentColor,newColorName=_this$state.newColorName;var _this$props=this.props,paletteFull=_this$props.paletteFull,classes=_this$props.classes;return/*#__PURE__*/React.createElement(\"div\",{className:classes.container},/*#__PURE__*/React.createElement(ChromePicker,{color:currentColor,onChange:this.handleColorChange,className:classes.picker}),/*#__PURE__*/React.createElement(ValidatorForm,{onSubmit:this.addNewColor,instantValidate:false},/*#__PURE__*/React.createElement(TextValidator,{placeholder:\"Color Name\",margin:\"normal\",variant:\"filled\",className:classes.colorNameInput,name:\"newColorName\",value:newColorName,onChange:this.handleChange,validators:['required','isColorNameUnique','isColorUnique'],errorMessages:['Enter a color name','Color Name must be unique','Color already used']}),/*#__PURE__*/React.createElement(Button,{className:classes.addColor,variant:\"contained\",color:\"primary\",style:{backgroundColor:paletteFull?\"grey\":currentColor},type:\"submit\",disabled:paletteFull},paletteFull?\"Palette Full\":\"Add Color\")));}}]);return ColorPicker;}(React.Component);ColorPicker.defaultProps={initialColor:\"purple\"};export default withStyles(styles)(ColorPicker);","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/ColorPicker.js"],"names":["React","ChromePicker","Button","ValidatorForm","TextValidator","withStyles","styles","ColorPicker","props","handleColorChange","color","setState","currentColor","rgb","r","g","b","a","handleChange","evt","target","name","value","addNewColor","state","newColorName","initialColor","addValidationRule","colors","every","toLowerCase","paletteFull","classes","container","picker","colorNameInput","addColor","backgroundColor","Component","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {ChromePicker} from \"react-color\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport styles from \"./styles/ColorPickerStyles\"\r\n\r\nclass ColorPicker extends React.Component {\r\n\r\n  static defaultProps = {\r\n    initialColor: \"purple\"\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentColor: this.props.initialColor,\r\n      newColorName: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule('isColorNameUnique', (value) => {\r\n        return this.props.colors.every(({name}) => name.toLowerCase() !== value.toLowerCase())\r\n    });\r\n    ValidatorForm.addValidationRule('isColorUnique', (value) => {\r\n      return this.props.colors.every(({color}) => color !== this.state.currentColor)\r\n    });\r\n  }\r\n\r\n  handleColorChange = color => {\r\n    this.setState({\r\n      currentColor: `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${color.rgb.a})`\r\n    });\r\n  };\r\n\r\n  handleChange = (evt) =>{\r\n    this.setState({[evt.target.name]: evt.target.value})\r\n  } \r\n\r\n  addNewColor = () =>{\r\n    this.props.addNewColor({name: this.state.newColorName, color: this.state.currentColor});\r\n    this.setState({newColorName: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const { currentColor, newColorName } = this.state;\r\n    const { paletteFull, classes } = this.props;\r\n    return (\r\n            <div className={classes.container}>\r\n                <ChromePicker\r\n                  color={currentColor}\r\n                  onChange={this.handleColorChange}\r\n                  className={classes.picker}\r\n                />\r\n                <ValidatorForm onSubmit={this.addNewColor}\r\n                               instantValidate={false}>\r\n                  <TextValidator\r\n                      placeholder=\"Color Name\"\r\n                      margin=\"normal\"\r\n                      variant=\"filled\"\r\n                      className={classes.colorNameInput}\r\n                      name=\"newColorName\"\r\n                      value={newColorName}\r\n                      onChange={this.handleChange}\r\n                      validators={['required','isColorNameUnique', 'isColorUnique']}\r\n                      errorMessages={['Enter a color name','Color Name must be unique', 'Color already used']}\r\n                  />\r\n                <Button \r\n                  className={classes.addColor}\r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  style={{backgroundColor: paletteFull ? \"grey\" : currentColor}}\r\n                  type=\"submit\"\r\n                  disabled={paletteFull}>\r\n                    {paletteFull ? \"Palette Full\" : \"Add Color\"}\r\n                  </Button>\r\n              </ValidatorForm>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ColorPicker);"]},"metadata":{},"sourceType":"module"}