{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\src\\\\NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport ColorPicker from './ColorPicker';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { arrayMove } from \"react-sortable-hoc\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.colorChanged = color => {\n      this.setState({\n        currentColor: `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${color.rgb.a})`\n      });\n    };\n\n    this.addNewColor = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: \"\"\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleSubmit = newPaletteName => {\n      const newPalette = {\n        paletteName: newPaletteName,\n        colors: this.state.colors,\n        id: newPaletteName.toLowerCase().replace(/\\s/g, \"-\")\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.removeColor = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandomColor = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      let rand = Math.floor(Math.random() * allColors.length);\n      this.setState({\n        colors: [...this.state.colors, allColors[rand]]\n      });\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      colors: this.props.palettes[0].colors,\n      newColorName: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isColorNameUnique', value => {\n      return this.state.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase());\n    });\n    ValidatorForm.addValidationRule('isColorUnique', value => {\n      return this.state.colors.every(({\n        color\n      }) => color !== this.state.currentColor);\n    });\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNav, {\n      open: open,\n      classes: classes,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, \"Random Color\")), /*#__PURE__*/React.createElement(ColorPicker, {\n      initialColor: this.state.currentColor,\n      colorChanged: this.colorChanged,\n      paleteFull: paletteFull,\n      currentColor: this.state.currentColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColorList, {\n      onSortEnd: this.onSortEnd,\n      axis: \"xy\",\n      colors: colors,\n      removeColor: this.removeColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","ColorPicker","DraggableColorList","ValidatorForm","TextValidator","arrayMove","PaletteFormNav","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","contentShift","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","colorChanged","color","currentColor","rgb","r","g","b","a","addNewColor","newColor","state","name","newColorName","colors","handleChange","evt","target","value","handleSubmit","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","palettes","map","p","flat","rand","Math","floor","random","length","componentDidMount","addValidationRule","every","render","classes","maxColors","paletteFull","paper","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ColorPicker from './ColorPicker';\r\nimport DraggableColorList from \"./DraggableColorList\";\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport {arrayMove} from \"react-sortable-hoc\";\r\nimport PaletteFormNav from \"./PaletteFormNav\";\r\n \r\n\r\nconst drawerWidth = 300;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    })\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    })\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 20\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"calc(100vh - 64px)\",\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginLeft: -drawerWidth\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginLeft: 0\r\n  }\r\n});\r\n\r\nclass NewPaletteForm extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      open: true,\r\n      currentColor: \"teal\",\r\n      colors: this.props.palettes[0].colors,\r\n      newColorName: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule('isColorNameUnique', (value) => {\r\n        return this.state.colors.every(({name}) => name.toLowerCase() !== value.toLowerCase())\r\n    });\r\n    ValidatorForm.addValidationRule('isColorUnique', (value) => {\r\n      return this.state.colors.every(({color}) => color !== this.state.currentColor)\r\n    });\r\n}\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  colorChanged = color => {\r\n    this.setState({currentColor: `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${color.rgb.a})`});\r\n  }\r\n\r\n  addNewColor = () =>{\r\n    const newColor={\r\n      color: this.state.currentColor,\r\n      name: this.state.newColorName\r\n    }\r\n    this.setState({colors: [...this.state.colors, newColor], newColorName: \"\"})\r\n  }\r\n\r\n  handleChange = (evt) =>{\r\n    this.setState({[evt.target.name]: evt.target.value})\r\n  } \r\n\r\n  handleSubmit = (newPaletteName) =>{\r\n    const newPalette={\r\n        paletteName: newPaletteName, \r\n        colors: this.state.colors, \r\n        id: newPaletteName.toLowerCase().replace(/\\s/g,\"-\")\r\n      }\r\n    this.props.savePalette(newPalette);\r\n    this.props.history.push(\"/\");\r\n  }\r\n  \r\n  removeColor = (colorName)=>{\r\n    this.setState({colors: this.state.colors.filter(color=>color.name!==colorName)});\r\n  }\r\n\r\n  onSortEnd = ({oldIndex, newIndex}) => {\r\n    this.setState(({colors}) => ({\r\n      colors: arrayMove(colors, oldIndex, newIndex),\r\n    }));\r\n  };\r\n\r\n  clearColors = () =>{\r\n    this.setState({colors: []})\r\n  }\r\n\r\n  addRandomColor = () =>{\r\n    const allColors = this.props.palettes.map(p=>p.colors).flat();\r\n    let rand = Math.floor(Math.random()*allColors.length)\r\n    this.setState({colors: [...this.state.colors, allColors[rand]]})\r\n  }\r\n\r\n  render() {\r\n    const { classes, maxColors, palettes } = this.props;\r\n    const { open, colors } = this.state;\r\n    const paletteFull = colors.length>=maxColors;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <PaletteFormNav open={open}\r\n                        classes={classes}\r\n                        palettes={palettes}\r\n                        handleSubmit={this.handleSubmit}\r\n                        handleDrawerOpen={this.handleDrawerOpen}/>\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant='persistent'\r\n          anchor='left'\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <IconButton onClick={this.handleDrawerClose}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <Typography variant=\"h4\">Design Your Palette</Typography>\r\n          <div>\r\n            <Button variant=\"contained\" \r\n                    color=\"secondary\"\r\n                    onClick={this.clearColors}>\r\n                      Clear Palette\r\n            </Button>\r\n            <Button variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={this.addRandomColor}\r\n                    disabled={paletteFull}>\r\n                      Random Color\r\n            </Button>\r\n          </div>\r\n          <ColorPicker  initialColor={this.state.currentColor} \r\n                        colorChanged={this.colorChanged}\r\n                        paleteFull={paletteFull}\r\n                        currentColor={this.state.currentColor}/>\r\n        </Drawer>\r\n        <main\r\n          className={classNames(classes.content, {\r\n            [classes.contentShift]: open\r\n          })}\r\n        >\r\n          <div className={classes.drawerHeader} />\r\n          <DraggableColorList \r\n                onSortEnd={this.onSortEnd}\r\n                axis=\"xy\"\r\n                colors={colors} \r\n                removeColor={this.removeColor}/>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}