{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\src\\\\PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.state = {\n      stage: \"form\",\n      newPaletteName: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch' \n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => {\n      return this.props.palettes.every(({\n        paletteName\n      }) => paletteName !== this.state.newPaletteName);\n    });\n  }\n\n  render() {\n    const {\n      newPaletteName,\n      stage\n    } = this.state;\n    const {\n      hideForm,\n      handleSubmit\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: stage === \"emoji\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Picker, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: stage === \"form\",\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      onClose: hideForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }, \"Choose a Palette Name\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: () => handleSubmit(newPaletteName),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, \"Please enter a name for your palette. Make sure it's unique!\"), /*#__PURE__*/React.createElement(TextValidator, {\n      fullWidth: true,\n      margin: \"normal\",\n      value: this.state.newPaletteName,\n      name: \"newPaletteName\",\n      label: \"Palette Name\",\n      onChange: this.handleChange,\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['Enter a palette name', 'Name already used'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      onClick: hideForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, \"Save Palette\")))));\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/PaletteMetaForm.js"],"names":["React","Component","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","constructor","props","handleChange","evt","setState","target","name","value","handleClickOpen","open","handleClose","state","stage","newPaletteName","componentDidMount","addValidationRule","palettes","every","paletteName","render","hideForm","handleSubmit"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nclass PaletteMetaForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            stage: \"form\",\r\n            newPaletteName: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // custom rule will have name 'isPasswordMatch' \r\n        ValidatorForm.addValidationRule('isPaletteNameUnique', (value) => {\r\n          return this.props.palettes.every(({paletteName}) => paletteName !== this.state.newPaletteName)\r\n        });\r\n    }\r\n\r\n    handleChange = (evt) =>{\r\n        this.setState({[evt.target.name]: evt.target.value})\r\n      } \r\n\r\n    handleClickOpen = () =>{\r\n        this.setState({open: true})\r\n    }\r\n\r\n    handleClose = () =>{\r\n        this.setState({open: false})\r\n    }\r\n\r\n    render() {\r\n        const { newPaletteName, stage } = this.state;\r\n        const { hideForm, handleSubmit } = this.props\r\n        return (\r\n            <div>\r\n                <Dialog open={stage===\"emoji\"}>\r\n                    <Picker />\r\n                </Dialog>\r\n                <Dialog open={stage===\"form\"} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\" onClose={hideForm}>\r\n                    <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\r\n                    <ValidatorForm onSubmit={() => handleSubmit(newPaletteName)}>\r\n                        <DialogContent>\r\n                        <DialogContentText>\r\n                            Please enter a name for your palette. Make sure it's unique!\r\n                        </DialogContentText>                           \r\n                        <TextValidator\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            value={this.state.newPaletteName}\r\n                            name=\"newPaletteName\"\r\n                            label=\"Palette Name\"\r\n                            onChange={this.handleChange}\r\n                            validators={['required','isPaletteNameUnique']}\r\n                            errorMessages={['Enter a palette name','Name already used']}    \r\n                        />\r\n                    \r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"primary\" onClick={hideForm}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Save Palette</Button>\r\n                        </DialogActions>\r\n                    </ValidatorForm>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PaletteMetaForm;"]},"metadata":{},"sourceType":"module"}