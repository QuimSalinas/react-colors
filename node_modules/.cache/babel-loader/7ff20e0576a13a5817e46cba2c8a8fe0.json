{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Button from'@material-ui/core/Button';import Dialog from'@material-ui/core/Dialog';import DialogActions from'@material-ui/core/DialogActions';import DialogContent from'@material-ui/core/DialogContent';import DialogContentText from'@material-ui/core/DialogContentText';import DialogTitle from'@material-ui/core/DialogTitle';import{ValidatorForm,TextValidator}from'react-material-ui-form-validator';import'emoji-mart/css/emoji-mart.css';import{Picker}from'emoji-mart';var PaletteMetaForm=/*#__PURE__*/function(_Component){_inherits(PaletteMetaForm,_Component);var _super=_createSuper(PaletteMetaForm);function PaletteMetaForm(props){var _this;_classCallCheck(this,PaletteMetaForm);_this=_super.call(this,props);_this.handleChange=function(evt){_this.setState(_defineProperty({},evt.target.name,evt.target.value));};_this.handleClickOpen=function(){_this.setState({open:true});};_this.handleClose=function(){_this.setState({open:false});};_this.showEmojiPicker=function(){_this.setState({stage:\"emoji\"});};_this.savePalette=function(emoji){var newPalette={paletteName:_this.state.newPaletteName,emoji:emoji.native};_this.props.handleSubmit(newPalette);_this.setState({stage:\"\"});};_this.state={stage:\"form\",newPaletteName:\"\"};return _this;}_createClass(PaletteMetaForm,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// custom rule will have name 'isPasswordMatch' \nValidatorForm.addValidationRule('isPaletteNameUnique',function(value){return _this2.props.palettes.every(function(_ref){var paletteName=_ref.paletteName;return paletteName!==_this2.state.newPaletteName;});});}},{key:\"render\",value:function render(){var stage=this.state.stage;var hideForm=this.props.hideForm;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Dialog,{open:stage===\"emoji\",onClose:hideForm},/*#__PURE__*/React.createElement(DialogTitle,{id:\"form-dialog-title\"},\"Choose a Palette Emoji\"),/*#__PURE__*/React.createElement(Picker,{onSelect:this.savePalette,title:\"Pick a palette Emoji!\"})),/*#__PURE__*/React.createElement(Dialog,{open:stage===\"form\",\"aria-labelledby\":\"form-dialog-title\",onClose:hideForm},/*#__PURE__*/React.createElement(DialogTitle,{id:\"form-dialog-title\"},\"Choose a Palette Name\"),/*#__PURE__*/React.createElement(ValidatorForm,{onSubmit:this.showEmojiPicker},/*#__PURE__*/React.createElement(DialogContent,null,/*#__PURE__*/React.createElement(DialogContentText,null,\"Please enter a name for your palette. Make sure it's unique!\"),/*#__PURE__*/React.createElement(TextValidator,{fullWidth:true,margin:\"normal\",value:this.state.newPaletteName,name:\"newPaletteName\",label:\"Palette Name\",onChange:this.handleChange,validators:['required','isPaletteNameUnique'],errorMessages:['Enter a palette name','Name already used']})),/*#__PURE__*/React.createElement(DialogActions,null,/*#__PURE__*/React.createElement(Button,{onClick:hideForm,color:\"primary\"},\"Cancel\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",type:\"submit\"},\"Save Palette\")))));}}]);return PaletteMetaForm;}(Component);export default PaletteMetaForm;","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/PaletteMetaForm.js"],"names":["React","Component","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","props","handleChange","evt","setState","target","name","value","handleClickOpen","open","handleClose","showEmojiPicker","stage","savePalette","emoji","newPalette","paletteName","state","newPaletteName","native","handleSubmit","addValidationRule","palettes","every","hideForm"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nclass PaletteMetaForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            stage: \"form\",\r\n            newPaletteName: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // custom rule will have name 'isPasswordMatch' \r\n        ValidatorForm.addValidationRule('isPaletteNameUnique', (value) => {\r\n          return this.props.palettes.every(({paletteName}) => paletteName !== this.state.newPaletteName)\r\n        });\r\n    }\r\n\r\n    handleChange = (evt) =>{\r\n        this.setState({[evt.target.name]: evt.target.value})\r\n      } \r\n\r\n    handleClickOpen = () =>{\r\n        this.setState({open: true})\r\n    }\r\n\r\n    handleClose = () =>{\r\n        this.setState({open: false})\r\n    }\r\n\r\n    showEmojiPicker = () =>{\r\n        this.setState({stage: \"emoji\"})\r\n    }\r\n\r\n    savePalette = (emoji) =>{\r\n        const newPalette = {paletteName: this.state.newPaletteName, emoji: emoji.native};\r\n        this.props.handleSubmit(newPalette);\r\n        this.setState({stage: \"\"});\r\n    }\r\n\r\n    render() {\r\n        const { stage } = this.state;\r\n        const { hideForm } = this.props\r\n        return (\r\n            <div>\r\n                <Dialog open={stage===\"emoji\"} onClose={hideForm}>\r\n                    <DialogTitle id=\"form-dialog-title\">\r\n                        Choose a Palette Emoji\r\n                    </DialogTitle>\r\n                    <Picker onSelect={this.savePalette} title=\"Pick a palette Emoji!\"/>\r\n                </Dialog>\r\n                <Dialog open={stage===\"form\"} aria-labelledby=\"form-dialog-title\" onClose={hideForm}>\r\n                    <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\r\n                    <ValidatorForm onSubmit={this.showEmojiPicker}>\r\n                        <DialogContent>\r\n                        <DialogContentText>\r\n                            Please enter a name for your palette. Make sure it's unique!\r\n                        </DialogContentText>                           \r\n                        <TextValidator\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            value={this.state.newPaletteName}\r\n                            name=\"newPaletteName\"\r\n                            label=\"Palette Name\"\r\n                            onChange={this.handleChange}\r\n                            validators={['required','isPaletteNameUnique']}\r\n                            errorMessages={['Enter a palette name','Name already used']}    \r\n                        />\r\n                    \r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                        <Button onClick={hideForm} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Save Palette</Button>\r\n                        </DialogActions>\r\n                    </ValidatorForm>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PaletteMetaForm;"]},"metadata":{},"sourceType":"module"}