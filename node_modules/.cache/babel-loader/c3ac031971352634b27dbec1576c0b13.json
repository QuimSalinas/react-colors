{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\src\\\\ColorPicker.js\";\nimport React from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { arrayMove } from \"react-sortable-hoc\";\nimport PaletteFormNav from \"./PaletteFormNav\";\n\nclass ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleColorChange = color => {\n      this.setState({\n        currentColor: `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${color.rgb.a})`\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.addNewColor = () => {\n      this.props.addNewColor({\n        name: this.state.newColorName,\n        color: this.state.currentColor\n      });\n      this.setState({\n        newColorName: \"\"\n      });\n    };\n\n    this.state = {\n      currentColor: this.props.initialColor,\n      newColorName: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isColorNameUnique', value => {\n      return this.props.colors.every(({\n        name\n      }) => name.toLowerCase() !== value.toLowerCase());\n    });\n    ValidatorForm.addValidationRule('isColorUnique', value => {\n      return this.props.colors.every(({\n        color\n      }) => color !== this.state.currentColor);\n    });\n  }\n\n  render() {\n    const {\n      currentColor\n    } = this.state;\n    const {\n      paleteFull\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChromePicker, {\n      color: currentColor,\n      onChange: this.handleColorChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.addNewColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      name: \"newColorName\",\n      value: this.state.newColorName,\n      onChange: this.handleChange,\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['Enter a color name', 'Color Name must be unique', 'Color already used'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        backgroundColor: paletteFull ? \"grey\" : this.state.colorValue\n      },\n      type: \"submit\",\n      disabled: paleteFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, paleteFull ? \"Palette Full\" : \"Add Color\")));\n  }\n\n}\n\nColorPicker.defaultProps = {\n  initialColor: \"purple\"\n};\nexport default ColorPicker;","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/ColorPicker.js"],"names":["React","ChromePicker","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","ValidatorForm","TextValidator","arrayMove","PaletteFormNav","ColorPicker","Component","constructor","props","handleColorChange","color","setState","currentColor","rgb","r","g","b","a","handleChange","evt","target","name","value","addNewColor","state","newColorName","initialColor","componentDidMount","addValidationRule","colors","every","toLowerCase","render","paleteFull","backgroundColor","paletteFull","colorValue","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {ChromePicker} from \"react-color\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DraggableColorList from \"./DraggableColorList\";\r\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\r\nimport {arrayMove} from \"react-sortable-hoc\";\r\nimport PaletteFormNav from \"./PaletteFormNav\";\r\n\r\nclass ColorPicker extends React.Component {\r\n\r\n  static defaultProps = {\r\n    initialColor: \"purple\"\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentColor: this.props.initialColor,\r\n      newColorName: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule('isColorNameUnique', (value) => {\r\n        return this.props.colors.every(({name}) => name.toLowerCase() !== value.toLowerCase())\r\n    });\r\n    ValidatorForm.addValidationRule('isColorUnique', (value) => {\r\n      return this.props.colors.every(({color}) => color !== this.state.currentColor)\r\n    });\r\n  }\r\n\r\n  handleColorChange = color => {\r\n    this.setState({\r\n      currentColor: `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${color.rgb.a})`\r\n    });\r\n  };\r\n\r\n  handleChange = (evt) =>{\r\n    this.setState({[evt.target.name]: evt.target.value})\r\n  } \r\n\r\n  addNewColor = () =>{\r\n    this.props.addNewColor({name: this.state.newColorName, color: this.state.currentColor});\r\n    this.setState({newColorName: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const { currentColor } = this.state;\r\n    const { paleteFull } = this.props;\r\n    return (\r\n            <div>\r\n                <ChromePicker\r\n                  color={currentColor}\r\n                  onChange={this.handleColorChange}\r\n                />\r\n                <ValidatorForm onSubmit={this.addNewColor}>\r\n                  <TextValidator\r\n                      name=\"newColorName\"\r\n                      value={this.state.newColorName}\r\n                      onChange={this.handleChange}\r\n                      validators={['required','isColorNameUnique', 'isColorUnique']}\r\n                      errorMessages={['Enter a color name','Color Name must be unique', 'Color already used']}\r\n                  />\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  style={{backgroundColor: paletteFull ? \"grey\" : this.state.colorValue}}\r\n                  type=\"submit\"\r\n                  disabled={paleteFull}>\r\n                    {paleteFull ? \"Palette Full\" : \"Add Color\"}\r\n                  </Button>\r\n              </ValidatorForm>\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}