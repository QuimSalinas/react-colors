{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Public\\\\WEB DEVELOPER\\\\REACT\\\\react-colors\\\\src\\\\NewPaletteForm.js\";\nimport React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport ColorPicker from './ColorPicker';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from \"react-sortable-hoc\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nconst drawerWidth = 300;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  container: {\n    width: \"90%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.addNewColor = newColor => {\n      this.setState({\n        colors: [...this.state.colors, newColor]\n      });\n    };\n\n    this.handleChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.handleSubmit = newPaletteName => {\n      const newPalette = {\n        paletteName: newPaletteName,\n        colors: this.state.colors,\n        id: newPaletteName.toLowerCase().replace(/\\s/g, \"-\")\n      };\n      this.props.savePalette(newPalette);\n      this.props.history.push(\"/\");\n    };\n\n    this.removeColor = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandomColor = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      let rand = Math.floor(Math.random() * allColors.length);\n      this.setState({\n        colors: [...this.state.colors, allColors[rand]]\n      });\n    };\n\n    this.state = {\n      open: true,\n      colors: this.props.palettes[0].colors\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteFull = colors.length >= maxColors;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PaletteFormNav, {\n      open: open,\n      classes: classes,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      drawerWidth: drawerWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, \"Design Your Palette\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, \"Clear Palette\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandomColor,\n      disabled: paletteFull,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }, \"Random Color\")), /*#__PURE__*/React.createElement(ColorPicker, {\n      initialColor: \"teal\",\n      addNewColor: this.addNewColor,\n      paletteFull: paletteFull,\n      colors: this.state.colors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DraggableColorList, {\n      onSortEnd: this.onSortEnd,\n      axis: \"xy\",\n      colors: colors,\n      removeColor: this.removeColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["C:/Users/Public/WEB DEVELOPER/REACT/react-colors/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","ColorPicker","DraggableColorList","arrayMove","PaletteFormNav","drawerWidth","styles","theme","root","display","hide","drawer","width","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","container","flexDirection","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","addNewColor","newColor","colors","state","handleChange","evt","target","name","value","handleSubmit","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","removeColor","colorName","filter","color","onSortEnd","oldIndex","newIndex","clearColors","addRandomColor","allColors","palettes","map","p","flat","rand","Math","floor","random","length","render","classes","maxColors","paletteFull","paper","buttons","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ColorPicker from './ColorPicker';\r\nimport DraggableColorList from \"./DraggableColorList\";\r\nimport {arrayMove} from \"react-sortable-hoc\";\r\nimport PaletteFormNav from \"./PaletteFormNav\";\r\n \r\n\r\nconst drawerWidth = 300;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"calc(100vh - 64px)\",\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginLeft: -drawerWidth\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginLeft: 0\r\n  },\r\n  container: {\r\n    width: \"90%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  }\r\n});\r\n\r\nclass NewPaletteForm extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      open: true,\r\n      colors: this.props.palettes[0].colors,\r\n    }\r\n  }\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n\r\n  addNewColor = (newColor) =>{\r\n    this.setState({colors: [...this.state.colors, newColor]})\r\n  }\r\n\r\n  handleChange = (evt) =>{\r\n    this.setState({[evt.target.name]: evt.target.value})\r\n  } \r\n\r\n  handleSubmit = (newPaletteName) =>{\r\n    const newPalette={\r\n        paletteName: newPaletteName, \r\n        colors: this.state.colors, \r\n        id: newPaletteName.toLowerCase().replace(/\\s/g,\"-\")\r\n      }\r\n    this.props.savePalette(newPalette);\r\n    this.props.history.push(\"/\");\r\n  }\r\n  \r\n  removeColor = (colorName)=>{\r\n    this.setState({colors: this.state.colors.filter(color=>color.name!==colorName)});\r\n  }\r\n\r\n  onSortEnd = ({oldIndex, newIndex}) => {\r\n    this.setState(({colors}) => ({\r\n      colors: arrayMove(colors, oldIndex, newIndex),\r\n    }));\r\n  };\r\n\r\n  clearColors = () =>{\r\n    this.setState({colors: []})\r\n  }\r\n\r\n  addRandomColor = () =>{\r\n    const allColors = this.props.palettes.map(p=>p.colors).flat();\r\n    let rand = Math.floor(Math.random()*allColors.length)\r\n    this.setState({colors: [...this.state.colors, allColors[rand]]})\r\n  }\r\n\r\n  render() {\r\n    const { classes, maxColors, palettes } = this.props;\r\n    const { open, colors } = this.state;\r\n    const paletteFull = colors.length>=maxColors;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <PaletteFormNav open={open}\r\n                        classes={classes}\r\n                        palettes={palettes}\r\n                        handleSubmit={this.handleSubmit}\r\n                        handleDrawerOpen={this.handleDrawerOpen}\r\n                        drawerWidth={drawerWidth}/>\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant='persistent'\r\n          anchor='left'\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <IconButton onClick={this.handleDrawerClose}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <div className={classes.container}>\r\n            <Typography variant=\"h5\">Design Your Palette</Typography>\r\n            <div className={classes.buttons}>\r\n              <Button variant=\"contained\" \r\n                      color=\"secondary\"\r\n                      onClick={this.clearColors}>\r\n                        Clear Palette\r\n              </Button>\r\n              <Button variant=\"contained\" \r\n                      color=\"primary\"\r\n                      onClick={this.addRandomColor}\r\n                      disabled={paletteFull}>\r\n                        Random Color\r\n              </Button>\r\n            </div>\r\n            <ColorPicker  initialColor=\"teal\" \r\n                          addNewColor={this.addNewColor}\r\n                          paletteFull={paletteFull}\r\n                          colors={this.state.colors}/>\r\n          </div>\r\n        </Drawer>\r\n        <main\r\n          className={classNames(classes.content, {\r\n            [classes.contentShift]: open\r\n          })}\r\n        >\r\n          <div className={classes.drawerHeader} />\r\n          <DraggableColorList \r\n                onSortEnd={this.onSortEnd}\r\n                axis=\"xy\"\r\n                colors={colors} \r\n                removeColor={this.removeColor}/>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);"]},"metadata":{},"sourceType":"module"}